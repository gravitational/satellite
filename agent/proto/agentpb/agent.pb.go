// Code generated by protoc-gen-gogo.
// source: agent.proto
// DO NOT EDIT!

/*
	Package agentpb is a generated protocol buffer package.

	It is generated from these files:
		agent.proto

	It has these top-level messages:
		StatusRequest
		StatusResponse
		LocalStatusRequest
		LocalStatusResponse
		SystemStatus
		MemberStatus
		NodeStatus
		Probe
		Timestamp
*/
package agentpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SystemStatus_Type int32

const (
	SystemStatus_Unknown  SystemStatus_Type = 0
	SystemStatus_Running  SystemStatus_Type = 1
	SystemStatus_Degraded SystemStatus_Type = 2
)

var SystemStatus_Type_name = map[int32]string{
	0: "Unknown",
	1: "Running",
	2: "Degraded",
}
var SystemStatus_Type_value = map[string]int32{
	"Unknown":  0,
	"Running":  1,
	"Degraded": 2,
}

func (x SystemStatus_Type) String() string {
	return proto.EnumName(SystemStatus_Type_name, int32(x))
}
func (SystemStatus_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorAgent, []int{4, 0} }

type MemberStatus_Type int32

const (
	MemberStatus_None    MemberStatus_Type = 0
	MemberStatus_Alive   MemberStatus_Type = 1
	MemberStatus_Leaving MemberStatus_Type = 2
	MemberStatus_Left    MemberStatus_Type = 3
	MemberStatus_Failed  MemberStatus_Type = 4
)

var MemberStatus_Type_name = map[int32]string{
	0: "None",
	1: "Alive",
	2: "Leaving",
	3: "Left",
	4: "Failed",
}
var MemberStatus_Type_value = map[string]int32{
	"None":    0,
	"Alive":   1,
	"Leaving": 2,
	"Left":    3,
	"Failed":  4,
}

func (x MemberStatus_Type) String() string {
	return proto.EnumName(MemberStatus_Type_name, int32(x))
}
func (MemberStatus_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorAgent, []int{5, 0} }

type NodeStatus_Type int32

const (
	NodeStatus_Unknown  NodeStatus_Type = 0
	NodeStatus_Running  NodeStatus_Type = 1
	NodeStatus_Degraded NodeStatus_Type = 2
)

var NodeStatus_Type_name = map[int32]string{
	0: "Unknown",
	1: "Running",
	2: "Degraded",
}
var NodeStatus_Type_value = map[string]int32{
	"Unknown":  0,
	"Running":  1,
	"Degraded": 2,
}

func (x NodeStatus_Type) String() string {
	return proto.EnumName(NodeStatus_Type_name, int32(x))
}
func (NodeStatus_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorAgent, []int{6, 0} }

type Probe_Type int32

const (
	Probe_Unknown    Probe_Type = 0
	Probe_Running    Probe_Type = 1
	Probe_Failed     Probe_Type = 2
	Probe_Terminated Probe_Type = 3
)

var Probe_Type_name = map[int32]string{
	0: "Unknown",
	1: "Running",
	2: "Failed",
	3: "Terminated",
}
var Probe_Type_value = map[string]int32{
	"Unknown":    0,
	"Running":    1,
	"Failed":     2,
	"Terminated": 3,
}

func (x Probe_Type) String() string {
	return proto.EnumName(Probe_Type_name, int32(x))
}
func (Probe_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorAgent, []int{7, 0} }

type StatusRequest struct {
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptorAgent, []int{0} }

type StatusResponse struct {
	Status *SystemStatus `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *StatusResponse) Reset()                    { *m = StatusResponse{} }
func (m *StatusResponse) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()               {}
func (*StatusResponse) Descriptor() ([]byte, []int) { return fileDescriptorAgent, []int{1} }

func (m *StatusResponse) GetStatus() *SystemStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type LocalStatusRequest struct {
}

func (m *LocalStatusRequest) Reset()                    { *m = LocalStatusRequest{} }
func (m *LocalStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*LocalStatusRequest) ProtoMessage()               {}
func (*LocalStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptorAgent, []int{2} }

type LocalStatusResponse struct {
	Status *NodeStatus `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *LocalStatusResponse) Reset()                    { *m = LocalStatusResponse{} }
func (m *LocalStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*LocalStatusResponse) ProtoMessage()               {}
func (*LocalStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptorAgent, []int{3} }

func (m *LocalStatusResponse) GetStatus() *NodeStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// System describes the health status of the cluster.
type SystemStatus struct {
	Status SystemStatus_Type `protobuf:"varint,1,opt,name=status,proto3,enum=agentpb.SystemStatus_Type" json:"status,omitempty"`
	// Health status of individual nodes.
	Nodes     []*NodeStatus `protobuf:"bytes,2,rep,name=nodes" json:"nodes,omitempty"`
	Timestamp *Timestamp    `protobuf:"bytes,3,opt,name=timestamp" json:"timestamp,omitempty"`
	// Human-readable status summary.
	Summary string `protobuf:"bytes,4,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (m *SystemStatus) Reset()                    { *m = SystemStatus{} }
func (m *SystemStatus) String() string            { return proto.CompactTextString(m) }
func (*SystemStatus) ProtoMessage()               {}
func (*SystemStatus) Descriptor() ([]byte, []int) { return fileDescriptorAgent, []int{4} }

func (m *SystemStatus) GetNodes() []*NodeStatus {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *SystemStatus) GetTimestamp() *Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

// MembereStatus represents the status of a member of the serf cluster.
type MemberStatus struct {
	Name   string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Addr   string            `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	Status MemberStatus_Type `protobuf:"varint,3,opt,name=status,proto3,enum=agentpb.MemberStatus_Type" json:"status,omitempty"`
	Tags   map[string]string `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *MemberStatus) Reset()                    { *m = MemberStatus{} }
func (m *MemberStatus) String() string            { return proto.CompactTextString(m) }
func (*MemberStatus) ProtoMessage()               {}
func (*MemberStatus) Descriptor() ([]byte, []int) { return fileDescriptorAgent, []int{5} }

func (m *MemberStatus) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

// NodeStatus represents a result of a health check for a single node.
type NodeStatus struct {
	Name         string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MemberStatus *MemberStatus   `protobuf:"bytes,2,opt,name=member_status,json=memberStatus" json:"member_status,omitempty"`
	Status       NodeStatus_Type `protobuf:"varint,3,opt,name=status,proto3,enum=agentpb.NodeStatus_Type" json:"status,omitempty"`
	// Probes lists all the health probes collected during the health check.
	Probes []*Probe `protobuf:"bytes,4,rep,name=probes" json:"probes,omitempty"`
}

func (m *NodeStatus) Reset()                    { *m = NodeStatus{} }
func (m *NodeStatus) String() string            { return proto.CompactTextString(m) }
func (*NodeStatus) ProtoMessage()               {}
func (*NodeStatus) Descriptor() ([]byte, []int) { return fileDescriptorAgent, []int{6} }

func (m *NodeStatus) GetMemberStatus() *MemberStatus {
	if m != nil {
		return m.MemberStatus
	}
	return nil
}

func (m *NodeStatus) GetProbes() []*Probe {
	if m != nil {
		return m.Probes
	}
	return nil
}

type Probe struct {
	// Checker is the name of the checker that generated the probe
	Checker string `protobuf:"bytes,1,opt,name=checker,proto3" json:"checker,omitempty"`
	// Detail is the optional detail specific to the checker
	Detail string `protobuf:"bytes,2,opt,name=detail,proto3" json:"detail,omitempty"`
	// Code is the optional code specific to a checker (i.e. HTTP status code)
	Code string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	// Status is the result of the probe
	Status Probe_Type `protobuf:"varint,4,opt,name=status,proto3,enum=agentpb.Probe_Type" json:"status,omitempty"`
	// Error is the probe-specific error message
	Error string `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	// CheckerData is a free-form data specific to the checker
	CheckerData []byte `protobuf:"bytes,6,opt,name=checker_data,json=checkerData,proto3" json:"checker_data,omitempty"`
}

func (m *Probe) Reset()                    { *m = Probe{} }
func (m *Probe) String() string            { return proto.CompactTextString(m) }
func (*Probe) ProtoMessage()               {}
func (*Probe) Descriptor() ([]byte, []int) { return fileDescriptorAgent, []int{7} }

type Timestamp struct {
	Seconds     int64 `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Nanoseconds int32 `protobuf:"varint,2,opt,name=nanoseconds,proto3" json:"nanoseconds,omitempty"`
}

func (m *Timestamp) Reset()                    { *m = Timestamp{} }
func (m *Timestamp) String() string            { return proto.CompactTextString(m) }
func (*Timestamp) ProtoMessage()               {}
func (*Timestamp) Descriptor() ([]byte, []int) { return fileDescriptorAgent, []int{8} }

func init() {
	proto.RegisterType((*StatusRequest)(nil), "agentpb.StatusRequest")
	proto.RegisterType((*StatusResponse)(nil), "agentpb.StatusResponse")
	proto.RegisterType((*LocalStatusRequest)(nil), "agentpb.LocalStatusRequest")
	proto.RegisterType((*LocalStatusResponse)(nil), "agentpb.LocalStatusResponse")
	proto.RegisterType((*SystemStatus)(nil), "agentpb.SystemStatus")
	proto.RegisterType((*MemberStatus)(nil), "agentpb.MemberStatus")
	proto.RegisterType((*NodeStatus)(nil), "agentpb.NodeStatus")
	proto.RegisterType((*Probe)(nil), "agentpb.Probe")
	proto.RegisterType((*Timestamp)(nil), "agentpb.Timestamp")
	proto.RegisterEnum("agentpb.SystemStatus_Type", SystemStatus_Type_name, SystemStatus_Type_value)
	proto.RegisterEnum("agentpb.MemberStatus_Type", MemberStatus_Type_name, MemberStatus_Type_value)
	proto.RegisterEnum("agentpb.NodeStatus_Type", NodeStatus_Type_name, NodeStatus_Type_value)
	proto.RegisterEnum("agentpb.Probe_Type", Probe_Type_name, Probe_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Agent service

type AgentClient interface {
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	LocalStatus(ctx context.Context, in *LocalStatusRequest, opts ...grpc.CallOption) (*LocalStatusResponse, error)
}

type agentClient struct {
	cc *grpc.ClientConn
}

func NewAgentClient(cc *grpc.ClientConn) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/agentpb.Agent/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) LocalStatus(ctx context.Context, in *LocalStatusRequest, opts ...grpc.CallOption) (*LocalStatusResponse, error) {
	out := new(LocalStatusResponse)
	err := grpc.Invoke(ctx, "/agentpb.Agent/LocalStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Agent service

type AgentServer interface {
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	LocalStatus(context.Context, *LocalStatusRequest) (*LocalStatusResponse, error)
}

func RegisterAgentServer(s *grpc.Server, srv AgentServer) {
	s.RegisterService(&_Agent_serviceDesc, srv)
}

func _Agent_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agentpb.Agent/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_LocalStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocalStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).LocalStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agentpb.Agent/LocalStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).LocalStatus(ctx, req.(*LocalStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Agent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "agentpb.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _Agent_Status_Handler,
		},
		{
			MethodName: "LocalStatus",
			Handler:    _Agent_LocalStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorAgent,
}

func (m *StatusRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *StatusRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *StatusResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *StatusResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		data[i] = 0xa
		i++
		i = encodeVarintAgent(data, i, uint64(m.Status.Size()))
		n1, err := m.Status.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *LocalStatusRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LocalStatusRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *LocalStatusResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LocalStatusResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		data[i] = 0xa
		i++
		i = encodeVarintAgent(data, i, uint64(m.Status.Size()))
		n2, err := m.Status.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *SystemStatus) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SystemStatus) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintAgent(data, i, uint64(m.Status))
	}
	if len(m.Nodes) > 0 {
		for _, msg := range m.Nodes {
			data[i] = 0x12
			i++
			i = encodeVarintAgent(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Timestamp != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintAgent(data, i, uint64(m.Timestamp.Size()))
		n3, err := m.Timestamp.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Summary) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintAgent(data, i, uint64(len(m.Summary)))
		i += copy(data[i:], m.Summary)
	}
	return i, nil
}

func (m *MemberStatus) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MemberStatus) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintAgent(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Addr) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintAgent(data, i, uint64(len(m.Addr)))
		i += copy(data[i:], m.Addr)
	}
	if m.Status != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintAgent(data, i, uint64(m.Status))
	}
	if len(m.Tags) > 0 {
		for k, _ := range m.Tags {
			data[i] = 0x22
			i++
			v := m.Tags[k]
			mapSize := 1 + len(k) + sovAgent(uint64(len(k))) + 1 + len(v) + sovAgent(uint64(len(v)))
			i = encodeVarintAgent(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintAgent(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintAgent(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	return i, nil
}

func (m *NodeStatus) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NodeStatus) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintAgent(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if m.MemberStatus != nil {
		data[i] = 0x12
		i++
		i = encodeVarintAgent(data, i, uint64(m.MemberStatus.Size()))
		n4, err := m.MemberStatus.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Status != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintAgent(data, i, uint64(m.Status))
	}
	if len(m.Probes) > 0 {
		for _, msg := range m.Probes {
			data[i] = 0x22
			i++
			i = encodeVarintAgent(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Probe) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Probe) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Checker) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintAgent(data, i, uint64(len(m.Checker)))
		i += copy(data[i:], m.Checker)
	}
	if len(m.Detail) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintAgent(data, i, uint64(len(m.Detail)))
		i += copy(data[i:], m.Detail)
	}
	if len(m.Code) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintAgent(data, i, uint64(len(m.Code)))
		i += copy(data[i:], m.Code)
	}
	if m.Status != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintAgent(data, i, uint64(m.Status))
	}
	if len(m.Error) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintAgent(data, i, uint64(len(m.Error)))
		i += copy(data[i:], m.Error)
	}
	if len(m.CheckerData) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintAgent(data, i, uint64(len(m.CheckerData)))
		i += copy(data[i:], m.CheckerData)
	}
	return i, nil
}

func (m *Timestamp) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Timestamp) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seconds != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintAgent(data, i, uint64(m.Seconds))
	}
	if m.Nanoseconds != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintAgent(data, i, uint64(m.Nanoseconds))
	}
	return i, nil
}

func encodeFixed64Agent(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Agent(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintAgent(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *StatusRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *StatusResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	return n
}

func (m *LocalStatusRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *LocalStatusResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	return n
}

func (m *SystemStatus) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovAgent(uint64(m.Status))
	}
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	l = len(m.Summary)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	return n
}

func (m *MemberStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovAgent(uint64(m.Status))
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAgent(uint64(len(k))) + 1 + len(v) + sovAgent(uint64(len(v)))
			n += mapEntrySize + 1 + sovAgent(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *NodeStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.MemberStatus != nil {
		l = m.MemberStatus.Size()
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovAgent(uint64(m.Status))
	}
	if len(m.Probes) > 0 {
		for _, e := range m.Probes {
			l = e.Size()
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	return n
}

func (m *Probe) Size() (n int) {
	var l int
	_ = l
	l = len(m.Checker)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	l = len(m.Detail)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovAgent(uint64(m.Status))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	l = len(m.CheckerData)
	if l > 0 {
		n += 1 + l + sovAgent(uint64(l))
	}
	return n
}

func (m *Timestamp) Size() (n int) {
	var l int
	_ = l
	if m.Seconds != 0 {
		n += 1 + sovAgent(uint64(m.Seconds))
	}
	if m.Nanoseconds != 0 {
		n += 1 + sovAgent(uint64(m.Nanoseconds))
	}
	return n
}

func sovAgent(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAgent(x uint64) (n int) {
	return sovAgent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StatusRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &SystemStatus{}
			}
			if err := m.Status.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalStatusRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalStatusResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &NodeStatus{}
			}
			if err := m.Status.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemStatus) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Status |= (SystemStatus_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &NodeStatus{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Summary = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemberStatus) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemberStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemberStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Status |= (MemberStatus_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthAgent
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthAgent
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(data[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Tags[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Tags[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeStatus) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MemberStatus == nil {
				m.MemberStatus = &MemberStatus{}
			}
			if err := m.MemberStatus.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Status |= (NodeStatus_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Probes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Probes = append(m.Probes, &Probe{})
			if err := m.Probes[len(m.Probes)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Probe) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Probe: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Probe: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checker = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Detail = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Status |= (Probe_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckerData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckerData = append(m.CheckerData[:0], data[iNdEx:postIndex]...)
			if m.CheckerData == nil {
				m.CheckerData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Timestamp) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Timestamp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Timestamp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seconds", wireType)
			}
			m.Seconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Seconds |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nanoseconds", wireType)
			}
			m.Nanoseconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Nanoseconds |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAgent(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAgent
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAgent
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAgent(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAgent = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAgent   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("agent.proto", fileDescriptorAgent) }

var fileDescriptorAgent = []byte{
	// 656 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xdf, 0x6a, 0x13, 0x4f,
	0x14, 0xce, 0xec, 0xbf, 0x76, 0x4f, 0xd2, 0xfc, 0x96, 0x69, 0x7f, 0x75, 0x89, 0x12, 0xe3, 0x5e,
	0x48, 0x45, 0x0c, 0x25, 0xbd, 0x50, 0xaa, 0x28, 0x2d, 0x55, 0x41, 0x6a, 0x91, 0x6d, 0xbc, 0x2e,
	0x93, 0xec, 0x31, 0x86, 0x66, 0x67, 0xe3, 0xee, 0xa4, 0x92, 0xb7, 0xf0, 0xb2, 0x8f, 0xe4, 0xa5,
	0x8f, 0x20, 0x15, 0x04, 0x2f, 0x7d, 0x03, 0x99, 0xc9, 0x6c, 0xb2, 0x9b, 0xa6, 0x88, 0x77, 0x73,
	0xbe, 0x39, 0xf3, 0xcd, 0xf9, 0xbe, 0x39, 0x73, 0xa0, 0xca, 0x06, 0xc8, 0x45, 0x7b, 0x9c, 0x26,
	0x22, 0xa1, 0x6b, 0x2a, 0x18, 0xf7, 0x82, 0xff, 0x60, 0xe3, 0x54, 0x30, 0x31, 0xc9, 0x42, 0xfc,
	0x34, 0xc1, 0x4c, 0x04, 0x2f, 0xa0, 0x9e, 0x03, 0xd9, 0x38, 0xe1, 0x19, 0xd2, 0x47, 0xe0, 0x64,
	0x0a, 0xf1, 0x49, 0x8b, 0xec, 0x54, 0x3b, 0xff, 0xb7, 0xf5, 0xe1, 0xf6, 0xe9, 0x34, 0x13, 0x18,
	0xeb, 0x74, 0x9d, 0x14, 0x6c, 0x01, 0x3d, 0x4e, 0xfa, 0x6c, 0x54, 0xa6, 0x3d, 0x84, 0xcd, 0x12,
	0xaa, 0xb9, 0x1f, 0x2e, 0x71, 0x6f, 0xce, 0xb9, 0x4f, 0x92, 0x08, 0x97, 0x98, 0x7f, 0x11, 0xa8,
	0x15, 0xaf, 0xa4, 0x9d, 0xd2, 0xe9, 0x7a, 0xa7, 0xb1, 0xb2, 0xb2, 0x76, 0x77, 0x3a, 0xc6, 0x9c,
	0x84, 0x3e, 0x00, 0x9b, 0x27, 0x11, 0x66, 0xbe, 0xd1, 0x32, 0x6f, 0xba, 0x70, 0x96, 0x41, 0x77,
	0xc1, 0x15, 0xc3, 0x18, 0x33, 0xc1, 0xe2, 0xb1, 0x6f, 0xaa, 0xfa, 0xe8, 0x3c, 0xbd, 0x9b, 0xef,
	0x84, 0x8b, 0x24, 0xea, 0xc3, 0x5a, 0x36, 0x89, 0x63, 0x96, 0x4e, 0x7d, 0xab, 0x45, 0x76, 0xdc,
	0x30, 0x0f, 0x83, 0x36, 0x58, 0xb2, 0x0c, 0x5a, 0x85, 0xb5, 0xf7, 0xfc, 0x9c, 0x27, 0x9f, 0xb9,
	0x57, 0x91, 0x41, 0x38, 0xe1, 0x7c, 0xc8, 0x07, 0x1e, 0xa1, 0x35, 0x58, 0x3f, 0xc2, 0x41, 0xca,
	0x22, 0x8c, 0x3c, 0x23, 0xb8, 0x34, 0xa0, 0xf6, 0x16, 0xe3, 0x1e, 0xa6, 0x5a, 0x2b, 0x05, 0x8b,
	0xb3, 0x18, 0x95, 0x52, 0x37, 0x54, 0x6b, 0x89, 0xb1, 0x28, 0x4a, 0x7d, 0x63, 0x86, 0xc9, 0x75,
	0xc1, 0x13, 0x73, 0xc9, 0x93, 0x22, 0x5d, 0xd9, 0x93, 0x3d, 0xb0, 0x04, 0x1b, 0x64, 0xbe, 0xa5,
	0x2c, 0xb9, 0x7b, 0xc3, 0x09, 0x36, 0xc8, 0x5e, 0x72, 0x91, 0x4e, 0x43, 0x95, 0xdc, 0x78, 0x0c,
	0xee, 0x1c, 0xa2, 0x1e, 0x98, 0xe7, 0x38, 0xd5, 0xc5, 0xc9, 0x25, 0xdd, 0x02, 0xfb, 0x82, 0x8d,
	0x26, 0xa8, 0x8b, 0x9b, 0x05, 0xfb, 0xc6, 0x13, 0x12, 0x3c, 0xd7, 0x56, 0xac, 0x83, 0x75, 0x92,
	0x70, 0xf4, 0x2a, 0xd4, 0x05, 0xfb, 0x60, 0x34, 0xbc, 0x40, 0x8f, 0x48, 0x4b, 0x8e, 0x91, 0x5d,
	0x48, 0x4b, 0x0c, 0x99, 0x71, 0x8c, 0x1f, 0x84, 0x67, 0x52, 0x00, 0xe7, 0x15, 0x1b, 0x8e, 0x30,
	0xf2, 0xac, 0xe0, 0x27, 0x01, 0x58, 0x3c, 0xd6, 0x4a, 0x63, 0xf6, 0x61, 0x23, 0x56, 0xb5, 0x9f,
	0x69, 0x2f, 0x8c, 0xa5, 0xce, 0x2d, 0x2a, 0x0b, 0x6b, 0x71, 0xd1, 0xe8, 0xdd, 0x25, 0x03, 0xfd,
	0x15, 0x1d, 0x52, 0xb6, 0xef, 0x3e, 0x38, 0xe3, 0x34, 0xe9, 0x61, 0x6e, 0x60, 0x7d, 0x7e, 0xe2,
	0x9d, 0x84, 0x43, 0xbd, 0xfb, 0xcf, 0x3d, 0xf0, 0x9b, 0x80, 0xad, 0x18, 0x64, 0x5f, 0xf5, 0x3f,
	0x62, 0xff, 0x1c, 0x53, 0x2d, 0x33, 0x0f, 0xe9, 0x36, 0x38, 0x11, 0x0a, 0x36, 0x1c, 0x69, 0x9f,
	0x75, 0x24, 0x5d, 0xe9, 0x27, 0x11, 0x2a, 0x0d, 0x6e, 0xa8, 0xd6, 0x85, 0xcf, 0x66, 0x29, 0x65,
	0x9b, 0xe5, 0x3a, 0xcb, 0xa2, 0xb6, 0xc0, 0xc6, 0x34, 0x4d, 0x52, 0xdf, 0x9e, 0xbd, 0x9f, 0x0a,
	0xe8, 0x3d, 0xa8, 0xe9, 0x9b, 0xcf, 0x22, 0x26, 0x98, 0xef, 0xb4, 0xc8, 0x4e, 0x2d, 0xac, 0x6a,
	0xec, 0x88, 0x09, 0x16, 0x3c, 0xfb, 0xab, 0xca, 0xc5, 0x63, 0x1a, 0xb4, 0x0e, 0xd0, 0xc5, 0x34,
	0x1e, 0x72, 0x26, 0x30, 0xf2, 0xcc, 0xe0, 0x35, 0xb8, 0xdd, 0xd2, 0x77, 0xc2, 0x7e, 0xc2, 0xa3,
	0xd9, 0x07, 0x37, 0xc3, 0x3c, 0xa4, 0x2d, 0xa8, 0x72, 0xc6, 0x93, 0x7c, 0x57, 0x6a, 0xb7, 0xc3,
	0x22, 0xd4, 0xf9, 0x42, 0xc0, 0x3e, 0x90, 0xf2, 0xe8, 0x53, 0x70, 0xf4, 0xd3, 0x6e, 0x2f, 0xe6,
	0x43, 0x71, 0x38, 0x35, 0x6e, 0x5d, 0xc3, 0x67, 0xe3, 0x29, 0xa8, 0xd0, 0x37, 0x50, 0x2d, 0xcc,
	0x2d, 0x7a, 0x7b, 0x9e, 0x79, 0x7d, 0xc6, 0x35, 0xee, 0xac, 0xde, 0xcc, 0xb9, 0x0e, 0xbd, 0xaf,
	0x57, 0x4d, 0xf2, 0xed, 0xaa, 0x49, 0xbe, 0x5f, 0x35, 0xc9, 0xe5, 0x8f, 0x66, 0xa5, 0xe7, 0xa8,
	0x69, 0xbc, 0xf7, 0x27, 0x00, 0x00, 0xff, 0xff, 0xe3, 0x7f, 0x61, 0xf0, 0x9c, 0x05, 0x00, 0x00,
}
